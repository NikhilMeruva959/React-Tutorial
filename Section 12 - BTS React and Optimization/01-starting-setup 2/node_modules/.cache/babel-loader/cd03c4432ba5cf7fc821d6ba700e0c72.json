{"ast":null,"code":"var _jsxFileName = \"/Users/nikmeruva/Documents/Udemy React Tutorial/Section 12 - BTS React and Optimization/01-starting-setup 2/src/components/Demo/DemoOutput.js\";\nimport React from \"react\";\nimport MyPara from \"./MyPara\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DemoOutput = props => {\n  console.log(\"DEMOPUTPUT Running\");\n  return /*#__PURE__*/_jsxDEV(MyPara, {\n    children: props.show ? \"This is new!\" : \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 12\n  }, this);\n};\n/* \n- React.memo allows us to optimze functional components\n- react.memo tells react, for this component, react should look at the props this component gets\n  and check the new value of the prop and compare prev value of the prop. Only if value of prop \n  chenge, then only reexecute component\n\n- react.memo comes at a cost\n    - whenever App component changes, it should come to this component and compare new vs prev prop value\n    - need to store prev prop value and make comparision\n    - performance cost\n\n*/\n\n\n_c = DemoOutput;\nexport default _c2 = /*#__PURE__*/React.memo(DemoOutput);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DemoOutput\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/nikmeruva/Documents/Udemy React Tutorial/Section 12 - BTS React and Optimization/01-starting-setup 2/src/components/Demo/DemoOutput.js"],"names":["React","MyPara","DemoOutput","props","console","log","show","memo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,sBAAO,QAAC,MAAD;AAAA,cAASF,KAAK,CAACG,IAAN,GAAa,cAAb,GAA8B;AAAvC;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAHD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAfMJ,U;AAgBN,kCAAeF,KAAK,CAACO,IAAN,CAAWL,UAAX,CAAf","sourcesContent":["import React from \"react\";\nimport MyPara from \"./MyPara\";\n\nconst DemoOutput = (props) => {\n    console.log(\"DEMOPUTPUT Running\")\n    return <MyPara>{props.show ? \"This is new!\" : \"\"}</MyPara>;\n};\n/* \n- React.memo allows us to optimze functional components\n- react.memo tells react, for this component, react should look at the props this component gets\n  and check the new value of the prop and compare prev value of the prop. Only if value of prop \n  chenge, then only reexecute component\n\n- react.memo comes at a cost\n    - whenever App component changes, it should come to this component and compare new vs prev prop value\n    - need to store prev prop value and make comparision\n    - performance cost\n\n*/\nexport default React.memo(DemoOutput);"]},"metadata":{},"sourceType":"module"}