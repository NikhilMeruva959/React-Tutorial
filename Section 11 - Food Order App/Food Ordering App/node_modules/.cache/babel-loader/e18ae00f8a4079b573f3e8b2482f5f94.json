{"ast":null,"code":"var _jsxFileName = \"/Users/nikmeruva/Documents/Udemy React Tutorial/Section 11 - Food Order App/Food Ordering App/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport CartContext from \"./cart-context\";\nimport { useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCardState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotAmount = state.totalAmount + action.item.price * action.item.amount; //return true if item curr is same id of item we are adding\n\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id); //returns existingCartItem with the index\n    //will be null if not there\n\n    const existingCartItem = state.items[existingCartItemIndex]; // concat doesn't add to array, it return new array\n\n    const updatedItems = state.items.concat(action.item);\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotAmount\n    };\n  }\n\n  return defaultCardState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  //The useReducer Hook is similar to the useState Hook.\n  // It allows for custom state logic.\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCardState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemToCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemToCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CartProvider, \"jsxn4L+NhHi/hmDupnf1NtGXhbw=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/nikmeruva/Documents/Udemy React Tutorial/Section 11 - Food Order App/Food Ordering App/src/store/CartProvider.js"],"names":["React","CartContext","useReducer","defaultCardState","items","totalAmount","cartReducer","state","action","type","updatedTotAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","concat","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemToCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,UAAT,QAA2B,OAA3B;;AAEA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAE,EADc;AAErBC,EAAAA,WAAW,EAAE;AAFQ,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,MAAGA,MAAM,CAACC,IAAP,KAAgB,KAAnB,EAAyB;AACrB,UAAMC,gBAAgB,GAAGH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACG,IAAP,CAAYC,KAAZ,GAAoBJ,MAAM,CAACG,IAAP,CAAYE,MAA7E,CADqB,CAGrB;;AACA,UAAMC,qBAAqB,GAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CACzBJ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACG,IAAP,CAAYK,EADR,CAA9B,CAJqB,CAOrB;AACA;;AACA,UAAMC,gBAAgB,GAAGV,KAAK,CAACH,KAAN,CAAYU,qBAAZ,CAAzB,CATqB,CAWrB;;AACA,UAAMI,YAAY,GAAGX,KAAK,CAACH,KAAN,CAAYe,MAAZ,CAAmBX,MAAM,CAACG,IAA1B,CAArB;AACA,WAAO;AACHP,MAAAA,KAAK,EAAEc,YADJ;AAEHb,MAAAA,WAAW,EAAEK;AAFV,KAAP;AAIH;;AACD,SAAOP,gBAAP;AACH,CApBD;;AAsBA,MAAMiB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC5B;AACA;AACA,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCrB,UAAU,CAACI,WAAD,EAAcH,gBAAd,CAAlD;;AAEA,QAAMqB,oBAAoB,GAAIb,IAAD,IAAU;AACnCY,IAAAA,kBAAkB,CAAC;AAACd,MAAAA,IAAI,EAAE,KAAP;AAAcE,MAAAA,IAAI,EAACA;AAAnB,KAAD,CAAlB;AACH,GAFD;;AAIA,QAAMc,uBAAuB,GAAIT,EAAD,IAAQ;AACpCO,IAAAA,kBAAkB,CAAC;AAACd,MAAAA,IAAI,EAAE,QAAP;AAAiBO,MAAAA,EAAE,EAACA;AAApB,KAAD,CAAlB;AACH,GAFD;;AAIA,QAAMU,WAAW,GAAG;AAChBtB,IAAAA,KAAK,EAAEkB,SAAS,CAAClB,KADD;AAEhBC,IAAAA,WAAW,EAAEiB,SAAS,CAACjB,WAFP;AAGhBsB,IAAAA,OAAO,EAAEH,oBAHO;AAIhBI,IAAAA,UAAU,EAAEH;AAJI,GAApB;AAOA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACFL,KAAK,CAACQ;AADJ;AAAA;AAAA;AAAA;AAAA,UAAP;AAGH,CAvBD;;GAAMT,Y;;KAAAA,Y;AAwBN,eAAeA,YAAf","sourcesContent":["import React from \"react\";\nimport CartContext from \"./cart-context\";\nimport { useReducer } from \"react\";\n\nconst defaultCardState = {\n    items: [],\n    totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n    if(action.type === 'ADD'){\n        const updatedTotAmount = state.totalAmount + action.item.price * action.item.amount;\n\n        //return true if item curr is same id of item we are adding\n        const existingCartItemIndex = state.items.findIndex(\n            (item) => item.id === action.item.id\n        );\n        //returns existingCartItem with the index\n        //will be null if not there\n        const existingCartItem = state.items[existingCartItemIndex];\n\n        // concat doesn't add to array, it return new array\n        const updatedItems = state.items.concat(action.item);\n        return {\n            items: updatedItems,\n            totalAmount: updatedTotAmount\n        }\n    }\n    return defaultCardState;\n};\n\nconst CartProvider = (props) => {\n    //The useReducer Hook is similar to the useState Hook.\n    // It allows for custom state logic.\n    const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCardState);\n\n    const addItemToCartHandler = (item) => {\n        dispatchCartAction({type: 'ADD', item:item});\n    };\n\n    const removeItemToCartHandler = (id) => {\n        dispatchCartAction({type: 'REMOVE', id:id})\n    };\n\n    const cartContext = {\n        items: cartState.items,\n        totalAmount: cartState.totalAmount,\n        addItem: addItemToCartHandler, \n        removeItem: removeItemToCartHandler\n    };\n\n    return <CartContext.Provider value={cartContext}>\n        {props.children}\n    </CartContext.Provider>\n};\nexport default CartProvider;"]},"metadata":{},"sourceType":"module"}