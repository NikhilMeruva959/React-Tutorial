{"ast":null,"code":"var _jsxFileName = \"/Users/nikmeruva/Documents/Udemy React Tutorial/Section 10 - Side Effects, Reducers, & Context API/01-starting-project 4/src/components/Login/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer, useContext } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport AuthContext from \"../../store/auth-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.includes(\"@\")\n    };\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    // state.value gets last snapshot\n    return {\n      value: state.value,\n      isValid: state.value.includes(\"@\")\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.trim().length > 6\n    };\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    // state.value gets last snapshot\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst Login = props => {\n  _s();\n\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState(\"\");\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: '',\n    isValid: null\n  });\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: '',\n    isValid: null\n  });\n  const authCtx = useContext(AuthContext); // If no dependicies, then infinite loop\n\n  useEffect(() => {\n    console.log(\"EFFECT RUNNING\"); //Since component is removed from the DOM\n\n    return () => {\n      console.log(\"EFFECT CLEANUP\");\n    };\n  }, []); // Object destructiong to pull out certain properties\n  // From emailState, we are extracting and pulling out isValid and storing in a constant emailIsValid\n\n  const {\n    isValid: emailIsValid\n  } = emailState;\n  const {\n    isValid: passwordIsValid\n  } = passwordState;\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      console.log('Checking form validity!');\n      setFormIsValid( // instead of emailState.isValid and passwordState.isValid\n      emailIsValid && passwordIsValid);\n    }, 500); // Cleanup function that will run before useEffect executs this function in time\n    // Except for the 1st time, this cleanup function will run\n    // Also will run whenever the component unmounts from DOM\n\n    return () => {\n      console.log('CLEANUP'); // clearTimeout(identifier) will clear timer set before this, so new timer will be set\n      // the above will run once, so say i keep typing, it will continously reset the timer\n\n      clearTimeout(identifier);\n    };\n  }, [emailIsValid, passwordIsValid]); // will run if emailIsValid, passwordIsValid chnage\n  //this effect will only run once when the component is rendered\n  // After every login component execution, it will rerun this useEffect() when either enteredEmail, enteredPassword change\n\n  const emailChangeHandler = event => {\n    dispatchEmail({\n      type: 'USER_INPUT',\n      val: event.target.value\n    }); // setFormIsValid(\n    //   event.target.value.includes(\"@\") && passwordState.trim().length > 6\n    // );\n  };\n\n  const passwordChangeHandler = event => {\n    dispatchPassword({\n      type: 'USER_INPUT',\n      val: event.target.value\n    }); // setFormIsValid(\n    //   emailState.isValid && event.target.value.trim().length > 6\n    // );\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onLogin(emailState.value, passwordState.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailState.isValid === false ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordState.isValid === false ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: passwordState.value,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"Q4Y2jckEgy/3N82syuiUPzh4Ed0=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/nikmeruva/Documents/Udemy React Tutorial/Section 10 - Side Effects, Reducers, & Context API/01-starting-project 4/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","useContext","Card","classes","Button","AuthContext","emailReducer","state","action","type","value","val","isValid","includes","passwordReducer","trim","length","Login","props","formIsValid","setFormIsValid","emailState","dispatchEmail","passwordState","dispatchPassword","authCtx","console","log","emailIsValid","passwordIsValid","identifier","setTimeout","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer, useContext } from \"react\";\n\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport AuthContext from \"../../store/auth-context\";\n\n\nconst emailReducer = (state, action) => {\n  if(action.type === 'USER_INPUT'){\n    return { value: action.val, isValid: action.val.includes(\"@\")};\n  }\n  if(action.type === 'INPUT_BLUR'){\n    // state.value gets last snapshot\n    return {value: state.value, isValid: state.value.includes(\"@\")};\n  }\n  return { value: '', isValid: false};\n};\n\n\nconst passwordReducer = (state, action) => {\n  if(action.type === 'USER_INPUT'){\n    return {value: action.val, isValid: action.val.trim().length > 6};\n  }\n  if(action.type === 'INPUT_BLUR'){\n    // state.value gets last snapshot\n    return {value: state.value, isValid: state.value.trim().length > 6};\n  }\n\n  return { value: '', isValid: false};\n};\n\nconst Login = (props) => {\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState(\"\");\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  \n  const [emailState, dispatchEmail] = useReducer(emailReducer, {value: '', isValid: null});\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {value: '', isValid: null});\n\n  const authCtx = useContext(AuthContext);\n\n  // If no dependicies, then infinite loop\n  useEffect(() => {\n    console.log(\"EFFECT RUNNING\");\n\n    //Since component is removed from the DOM\n    return () => {\n      console.log(\"EFFECT CLEANUP\");\n    };\n  }, []);\n\n  // Object destructiong to pull out certain properties\n  // From emailState, we are extracting and pulling out isValid and storing in a constant emailIsValid\n  const { isValid: emailIsValid } = emailState;\n  const { isValid: passwordIsValid } = passwordState;\n\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      console.log('Checking form validity!');\n      setFormIsValid(\n        // instead of emailState.isValid and passwordState.isValid\n        emailIsValid && passwordIsValid\n      );\n    }, 500);\n\n    // Cleanup function that will run before useEffect executs this function in time\n    // Except for the 1st time, this cleanup function will run\n    // Also will run whenever the component unmounts from DOM\n    return () => {\n      console.log('CLEANUP');\n      // clearTimeout(identifier) will clear timer set before this, so new timer will be set\n      // the above will run once, so say i keep typing, it will continously reset the timer\n      clearTimeout(identifier);\n    };\n  }, [emailIsValid, passwordIsValid]);\n  // will run if emailIsValid, passwordIsValid chnage\n\n  //this effect will only run once when the component is rendered\n\n  // After every login component execution, it will rerun this useEffect() when either enteredEmail, enteredPassword change\n\n  const emailChangeHandler = (event) => {\n    dispatchEmail({type: 'USER_INPUT', val: event.target.value});\n\n    // setFormIsValid(\n    //   event.target.value.includes(\"@\") && passwordState.trim().length > 6\n    // );\n  };\n\n  const passwordChangeHandler = (event) => {\n    dispatchPassword({type: 'USER_INPUT', val: event.target.value});\n\n    // setFormIsValid(\n    //   emailState.isValid && event.target.value.trim().length > 6\n    // );\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmail({type: 'INPUT_BLUR'});\n\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({type: 'INPUT_BLUR'});\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onLogin(emailState.value, passwordState.value);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            emailState.isValid === false ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={emailState.value}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordState.isValid === false ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={passwordState.value}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}