{"ast":null,"code":"var _jsxFileName = \"/Users/nikmeruva/Documents/Udemy React Tutorial/Section 8: Practice Project/01-starting-project 3/src/components/Users/AddUser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport Card from \"../UI/Card\";\nimport classes from \"./AddUser.module.css\";\nimport Button from \"../UI/Button\";\nimport ErrorModal from \"../UI/ErrorModal\";\nimport Wrapper from \"../Helpers/Wrapper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddUser = props => {\n  _s();\n\n  //useRef only usable inside functional components\n  const nameInputRef = useRef();\n  const ageInputRef = useRef();\n  const [error, setError] = useState();\n\n  const errorHandler = () => {\n    setError(null);\n  };\n\n  const addUserHandler = event => {\n    event.preventDefault();\n    console.log(nameInputRef.current.value);\n    const enteredName = nameInputRef.current.value;\n    const enteredUserAge = ageInputRef.current.value;\n\n    if (enteredName.trim().length === 0 || enteredUserAge.trim().length === 0) {\n      setError({\n        title: 'Invalid input',\n        message: 'Please enter a valid name and age (non-empty values)!'\n      });\n      return;\n    } //+ does string -> int conversion\n\n\n    if (+enteredUserAge < 1) {\n      setError({\n        title: 'Invalid age',\n        message: 'Please enter a valid age (>0)!'\n      });\n      return;\n    } // console.log(enteredUserName, enteredAge);\n\n\n    props.onAddUser(enteredName, enteredUserAge); // Rarely do, can manipulate DOM like this for resetting value\n\n    nameInputRef.current.value = '';\n    ageInputRef.current.value = '';\n  };\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [error && /*#__PURE__*/_jsxDEV(ErrorModal, {\n      title: error.title,\n      message: error.message,\n      onConfirm: errorHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: classes.input,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: addUserHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"username\",\n          children: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"username\",\n          type: \"text\" // The first react reaches and render this bit of code, it will set nameInputRef to the native DOM element\n          ,\n          ref: nameInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"age\",\n          children: \"Age\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"age\",\n          type: \"number\",\n          ref: ageInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"Add User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddUser, \"oeh9P4do1L6ON2Ex+93ODUUduFk=\");\n\n_c = AddUser;\nexport default AddUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddUser\");","map":{"version":3,"sources":["/Users/nikmeruva/Documents/Udemy React Tutorial/Section 8: Practice Project/01-starting-project 3/src/components/Users/AddUser.js"],"names":["React","useState","useRef","Card","classes","Button","ErrorModal","Wrapper","AddUser","props","nameInputRef","ageInputRef","error","setError","errorHandler","addUserHandler","event","preventDefault","console","log","current","value","enteredName","enteredUserAge","trim","length","title","message","onAddUser","input"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport Card from \"../UI/Card\";\nimport classes from \"./AddUser.module.css\";\nimport Button from \"../UI/Button\";\nimport ErrorModal from \"../UI/ErrorModal\";\nimport Wrapper from \"../Helpers/Wrapper\";\n\nconst AddUser = (props) => {\n  //useRef only usable inside functional components\n  const nameInputRef = useRef();\n  const ageInputRef = useRef();\n\n  const [error, setError] = useState();\n  \n  const errorHandler = () => {\n    setError(null);\n  };\n\n  const addUserHandler = (event) => {\n    event.preventDefault();\n    \n    console.log(nameInputRef.current.value);\n    const enteredName = nameInputRef.current.value;\n    const enteredUserAge = ageInputRef.current.value;\n\n    if (enteredName.trim().length === 0 || enteredUserAge.trim().length === 0) {\n      setError({\n          title: 'Invalid input',\n          message: 'Please enter a valid name and age (non-empty values)!'\n      });\n      return;\n    }\n    //+ does string -> int conversion\n    if (+enteredUserAge < 1) {\n        setError({\n            title: 'Invalid age',\n            message: 'Please enter a valid age (>0)!'\n        });\n      return;\n    }\n\n    // console.log(enteredUserName, enteredAge);\n    props.onAddUser(enteredName, enteredUserAge);\n\n    // Rarely do, can manipulate DOM like this for resetting value\n    nameInputRef.current.value = '';\n    ageInputRef.current.value = '';\n    \n  };\n\n  return (\n    <Wrapper>\n      {error && (<ErrorModal title={error.title} message={error.message} onConfirm={errorHandler}/>)}\n      <Card className={classes.input}>\n        <form onSubmit={addUserHandler}>\n          <label htmlFor=\"username\">Username</label>\n          {/* //value={enteredUserName} resets the form because of setEnteredAge(''); and setEnteredUserName(''); */}\n          <input\n            id=\"username\"\n            type=\"text\"\n            // The first react reaches and render this bit of code, it will set nameInputRef to the native DOM element\n            ref={nameInputRef}\n          />\n          <label htmlFor=\"age\">Age</label>\n          <input\n            id=\"age\"\n            type=\"number\"\n            ref={ageInputRef}\n          />\n          <Button type=\"submit\">Add User</Button>\n        </form>\n      </Card>\n    </Wrapper>\n  );\n};\nexport default AddUser;\n"]},"metadata":{},"sourceType":"module"}