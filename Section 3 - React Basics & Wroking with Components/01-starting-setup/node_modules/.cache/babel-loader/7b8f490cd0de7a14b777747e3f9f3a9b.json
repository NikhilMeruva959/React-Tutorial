{"ast":null,"code":"var _jsxFileName = \"/Users/nikmeruva/Documents/Udemy React Tutorial/Section 3 - React Basics & Wroking with Components/01-starting-setup/src/components/NewExpense/ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport CancelButton from '../CancelButton.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = props => {\n  _s();\n\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\"); // const [userInput, setUserInput] = useState({\n  //     enteredTitle: '',\n  //     enteredAmount: '',\n  //     enteredDate: ''\n  // });\n  //document.getElementById('').addEventListener('click', (event) => {})\n  // Eventlistner, click event, get event object when change occurs\n\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value); // ...userInput is taking an object, pulls all key value pairs, and adds to new object\n    // ...userInput makes sure other values like: enteredAmount: '' and enteredDate: '' arent thrown away and apart of new state\n    // However depends on the previous state, bad practice\n    // setUserInput({\n    //     ...userInput,\n    //     enteredTitle: event.target.value\n    // });\n    //Need anonmys arrow function- will automatically be executed by react and will recieve prev state snapshot for that state your calling that function\n    //React guarntees the snapshot will be latest with this way\n    // setUserInput((prevState) => {\n    //     return {...prevState, enteredTitle: event.target.value};\n    // });\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value); // setUserInput({\n    //     ...userInput,\n    //     enteredAmount: event.target.value\n    // });\n  };\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value); // setUserInput({\n    //     ...userInput,\n    //     enteredDate: event.target.value\n    // });\n  }; //The preventDefault() method cancels the event if it is cancelable, meaning that the default action that belongs to the event will not occur.\n\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    }; //So expenseData will go to NewExpense.js becuase of props.onSaveExpenseData(expenseData);\n    // child to parent passing information relationship\n\n    props.onSaveExpenseData(expenseData); // setEnteredTitle(\"\");\n    // setEnteredAmount(\"\");\n    // setEnteredDate(\"\"); \n  };\n\n  return (\n    /*#__PURE__*/\n    // onSubmit={} to submit form\n    _jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: enteredTitle,\n            onChange: titleChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            min: \"0.01\",\n            step: \"0.01\",\n            value: enteredAmount,\n            onChange: amountChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            min: \"2019-01-01\",\n            max: \"2022-12-31\",\n            value: enteredDate,\n            onChange: dateChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(ExpenseForm, \"cQceuCgozgRBnFcek1NBqBcFFts=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["/Users/nikmeruva/Documents/Udemy React Tutorial/Section 3 - React Basics & Wroking with Components/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"names":["React","useState","CancelButton","ExpenseForm","props","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport CancelButton from '../CancelButton.js';\n\nconst ExpenseForm = (props) => {\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n  // const [userInput, setUserInput] = useState({\n  //     enteredTitle: '',\n  //     enteredAmount: '',\n  //     enteredDate: ''\n  // });\n\n  //document.getElementById('').addEventListener('click', (event) => {})\n  // Eventlistner, click event, get event object when change occurs\n  const titleChangeHandler = (event) => {\n    setEnteredTitle(event.target.value);\n\n    // ...userInput is taking an object, pulls all key value pairs, and adds to new object\n    // ...userInput makes sure other values like: enteredAmount: '' and enteredDate: '' arent thrown away and apart of new state\n    // However depends on the previous state, bad practice\n    // setUserInput({\n    //     ...userInput,\n    //     enteredTitle: event.target.value\n    // });\n\n    //Need anonmys arrow function- will automatically be executed by react and will recieve prev state snapshot for that state your calling that function\n    //React guarntees the snapshot will be latest with this way\n    // setUserInput((prevState) => {\n    //     return {...prevState, enteredTitle: event.target.value};\n    // });\n  };\n\n  const amountChangeHandler = (event) => {\n    setEnteredAmount(event.target.value);\n\n    // setUserInput({\n    //     ...userInput,\n    //     enteredAmount: event.target.value\n    // });\n  };\n\n  const dateChangeHandler = (event) => {\n    setEnteredDate(event.target.value);\n\n    // setUserInput({\n    //     ...userInput,\n    //     enteredDate: event.target.value\n    // });\n  };\n\n  //The preventDefault() method cancels the event if it is cancelable, meaning that the default action that belongs to the event will not occur.\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate),\n    };\n\n    //So expenseData will go to NewExpense.js becuase of props.onSaveExpenseData(expenseData);\n    // child to parent passing information relationship\n    props.onSaveExpenseData(expenseData);\n    // setEnteredTitle(\"\");\n    // setEnteredAmount(\"\");\n    // setEnteredDate(\"\"); \n  };\n\n  return (\n    // onSubmit={} to submit form\n    <form onSubmit={submitHandler}>\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label>Title</label>\n          {/* Twoway Binding: value = {enteredDate} allows to reset value once done with form */}\n          <input\n            type=\"text\"\n            value={enteredTitle}\n            onChange={titleChangeHandler}\n          />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Amount</label>\n          <input\n            type=\"number\"\n            min=\"0.01\"\n            step=\"0.01\"\n            value={enteredAmount}\n            onChange={amountChangeHandler}\n          />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Date</label>\n          <input\n            type=\"date\"\n            min=\"2019-01-01\"\n            max=\"2022-12-31\"\n            value={enteredDate}\n            onChange={dateChangeHandler}\n          />\n        </div>\n      </div>\n      {/* <CancelButton className=\"new-expense__actions\" onClick></CancelButton> */}\n      <div className=\"new-expense__actions\">\n        <button type=\"submit\">Add Expense</button>\n      </div>\n    </form>\n  );\n};\n\nexport default ExpenseForm;\n"]},"metadata":{},"sourceType":"module"}